*****interface segration******
-Sınıfların yeteneklerini ten bir interface üzerinden değilde anlamlı bölünerek birden fazla interfaceler yardımıyla yapılmasını sağlayan prensib olarak düşünebiliriz
-Bu şekilde interface'e gereksiz metot eklememiş oluruz.Bir class birden fazla interface implemente edebilir.Kısacası bir class ihtiyacı olmayan interface'leri implemente etmeye zorlanmamalıdır.
-İhtiyacı olmayan bir interface implemente edilirse , bu kuralları boşta olsa bu classlarda yazmamız gerekecektir. Bu yöntem ile bu bağlılıkları ayırırız.
-Örneğimizde loglama sistemini düşünebiliriz. Loglama için elimizde Database ve file loglama yapacak şekilde interfaceleri oluşturalım.
-DatabaseLogger için bağlantı açıp kapama, bağlantı kontrolü gibi kendi ihitiyacı olacak IDblogger implemente edildi. FileLogger için ise kendi has path Kontrolü,
size kontrol gibi kendisini alakada edecek metotlar konuldu. Ortak olarak kullanılacak ILogger da ise sadece logla metodu kullanılarak bağımlılıklar azaltıldı.
-Eğer hepsini tek bir interface ile yapmış olsaydık,kullanmayacağımız metotların içini interface olduğu için kullanmak zorunda kalacaktık. Fazladan kod ve kontroller sağlayacaktık.
-Bu durumda bu prensibten faydalanarak anlamlı bir şekilde interfacelerin ayrılmasını sağladık.Çoklu implementasyonda sağlamış bulunduk.
-Sonuç olarak kullanılmayacak özellikleri implemente etmek bize yazılım sürdürebilirliği açısında fazla kod yazması, maliyetli işlemlere sebep olabilir.
